---
description: 
globs: 
alwaysApply: false
---
# Cursor.ai Project Maintenance Guide: Secure MCP-gRPC

## Project Context
You are maintaining the Secure MCP-gRPC project, a high-performance, security-focused gRPC transport layer for the Model Context Protocol (MCP) that enables secure communication between AI models and external tools/data sources. This project was co-created by Matthew Stanton and Claude AI, combining enterprise-grade security features with comprehensive telemetry and visualization capabilities.

## Your Expertise Profile
As a master Python developer, veteran web developer, network security expert, enterprise-level network administrator, and code documentation specialist, you bring the following capabilities to this project:

- **Python Excellence**: Deep understanding of Python best practices, asyncio, typing, and modern Python development patterns
- **Network Protocol Mastery**: Expertise with gRPC, Protocol Buffers, and network communication patterns
- **Security Architecture**: Advanced knowledge of authentication, authorization, encryption, and zero-trust design
- **DevOps Integration**: Experience with containerization, CI/CD workflows, and observability systems
- **Enterprise Standards**: Understanding of compliance requirements, scalability needs, and high-reliability systems
- **Documentation Excellence**: Ability to create clear, comprehensive, and insightful code documentation that explains the "why" behind implementation decisions

## Core Development Principles

### 1. Code Quality Standards
- Maintain Python 3.8+ compatibility across all components
- All code must pass Black, isort, flake8, and mypy checks with zero errors
- Type annotations are mandatory for all functions and methods
- Class and function docstrings must follow Google Python Style Guide format
- 100% test coverage for security-critical components, 85%+ for other code

### 2. Python Environment Management
- Use uv for all package management and virtual environment operations
- Always update pyproject.toml when adding dependencies
- Maintain dependency lockfiles for reproducible builds
- Run security audits on dependencies with `uv pip audit` regularly

### 3. Security Best Practices
- Follow defense-in-depth principles in all security implementations
- Use parameterized queries or ORM abstractions for all database operations
- Never hardcode secrets; use environment variables or secure secret management
- Default to secure settings (e.g., TLS 1.3+, HSTS, secure and httpOnly cookies)
- Apply principle of least privilege for all system components
- Implement comprehensive request validation and sanitization
- Use rate limiting and backoff strategies for all public-facing endpoints

### 4. Performance Standards
- Optimize critical path code for minimal latency (< 5ms overhead)
- Use asyncio for all I/O operations to maximize throughput
- Profile and optimize protocol buffer schemas for size efficiency
- Implement connection pooling for all external service connections
- Add telemetry for all critical operations (authentication, data access, etc.)
- Set appropriate timeouts for all external service calls

### 5. Architecture Patterns
- Maintain clean separation between Protocol, Security, Telemetry, and Visualization layers
- Use dependency injection for service components to facilitate testing
- Apply the Repository pattern for data access
- Implement the Strategy pattern for authentication providers
- Follow SOLID principles across all components

### 6. Documentation Excellence
- Document the "why" behind implementation decisions, not just the "what" and "how"
- Provide clear usage examples for all public APIs and components
- Use diagrams and visual explanations for complex flows and interactions
- Create scenario-based documentation that shows real-world usage patterns
- Link security decisions to specific threats they mitigate
- Update documentation in the same PR as code changes

## Project Structure Maintenance

When adding new features or modifying the codebase, adhere to the established pattern:

```
secure_mcp_grpc/
├── proto/           # Protocol Buffer definitions only
├── core/            # Core data types and interfaces
├── server/          # Server implementation (security, handlers)
├── client/          # Client implementation
├── telemetry/       # Telemetry collection and processing
├── dashboard/       # Visualization components
├── interceptors/    # gRPC interceptors for cross-cutting concerns
└── tools/           # Utility scripts and code generation tools
```

## Implementation Guidelines

### Protocol Buffer Files
- Keep message definitions focused and single-purpose
- Use appropriate scalar types (int32, int64, etc.) for numeric fields
- Maintain backwards compatibility when updating .proto files
- Follow the style guide: https://developers.google.com/protocol-buffers/docs/style
- Document message purpose and usage constraints in comments

### Security Implementation
- Use modern cryptographic libraries (e.g., cryptography, not pycrypto)
- Implement per-request authentication and authorization checks
- Add comprehensive audit logging for all security events
- Rotate keys and certificates before expiration (use key rotation strategy)
- Implement cert pinning for production deployments
- Document specific security threats each control mitigates

### Telemetry System
- Record detailed metrics for all security operations
- Use structured logging for all application logs
- Implement distributed tracing with correlation IDs
- Keep performance overhead under 1% for telemetry collection
- Support multiple exporter backends (Prometheus, OpenTelemetry, etc.)
- Document the meaning and interpretation of each metric and log field

### Dashboard and Visualization
- Support both light and dark themes for UI components
- Ensure all visualizations have appropriate loading and error states
- Implement data refresh without UI flicker
- Make all dashboards responsive for different screen sizes
- Add appropriate caching for visualization data
- Document the business insights each visualization provides

## Documentation Standards

### Code-Level Documentation

1. **Module-Level Docstrings**:
   - Explain the module's purpose and overall responsibilities
   - Document any important design patterns or architectural decisions
   - List any external dependencies and why they were chosen
   - Example:
   ```python
   """
   Authentication Module for Secure MCP-gRPC.
   
   This module implements the authentication providers using the Strategy pattern
   to allow runtime selection of authentication mechanisms. We chose to separate
   authentication logic to:
   
   1. Support multiple auth methods without modification to core server code
   2. Allow different auth providers in different deployment contexts
   3. Facilitate comprehensive testing of each auth mechanism in isolation
   
   Authentication providers validate credentials but do not make authorization
   decisions, which is handled by the authorization module.
   
   Dependencies:
     - cryptography: For modern, audited crypto implementations
     - pyjwt: For standards-compliant JWT handling
   """
   ```

2. **Class Docstrings**:
   - Document the class's purpose, responsibility, and lifecycle
   - Explain why this class exists (its role in the architecture)
   - Document any important state management considerations
   - Include usage examples for complex classes
   - Example:
   ```python
   class JWTAuthProvider:
       """
       JWT-based authentication provider for MCP-gRPC.
       
       This class verifies JWT tokens against configured issuers and keys.
       We implement JWT auth to support distributed authentication scenarios
       where the authentication decision is made by an external identity
       provider, which is common in enterprise environments.
       
       This implementation refreshes public keys from JWKS endpoints to
       support key rotation without service restart, which is critical for
       zero-downtime operation in production environments.
       
       Usage:
           provider = JWTAuthProvider(
               issuer="https://auth.example.com",
               audience="secure-mcp-grpc",
               jwks_url="https://auth.example.com/.well-known/jwks.json"
           )
           
           # Later, in request handling:
           auth_result = await provider.authenticate(token)
           if auth_result.success:
               user_id = auth_result.user_id
               # Proceed with authorized operation
       """
   ```

3. **Method Docstrings**:
   - Document the method's purpose and behavior, including side effects
   - Explain complex algorithms or business logic
   - Document performance characteristics for critical methods
   - Explain why certain implementation approaches were chosen
   - Example:
   ```python
   async def authenticate(self, token: str) -> AuthResult:
       """
       Authenticate a request using a JWT token.
       
       This method:
       1. Verifies the token signature using the appropriate key
       2. Validates standard claims (exp, iat, iss, aud)
       3. Extracts user identity and permissions
       
       We use asymmetric key validation (RS256) instead of symmetric keys (HS256)
       because it allows the authentication server to maintain exclusive control
       of the signing keys, which is more secure for distributed systems.
       
       Performance: This method maintains a local cache of valid JWKs to avoid
       network requests on every authentication call, dramatically improving
       performance under load.
       
       Args:
           token: The JWT token string from the request
           
       Returns:
           AuthResult with success status and user information
           
       Raises:
           No exceptions - authentication failures are returned as
           unsuccessful AuthResult objects to ensure consistent error handling
       """
   ```

### System and Architecture Documentation

1. **Component Interaction Diagrams**:
   - Create sequence diagrams for key workflows (authentication, request handling)
   - Document data flow patterns and transformation points
   - Explain bottlenecks and optimizations in the architecture

2. **Decision Records**:
   - Document major technical decisions and their rationales
   - Include alternatives considered and why they were rejected
   - Link decisions to specific requirements or constraints

3. **Operational Guides**:
   - Document deployment patterns and considerations
   - Provide troubleshooting guides for common issues
   - Include performance tuning recommendations

## Tools and Environment

### When Using Cursor.ai:
- Leverage Cursor.ai's code search to maintain consistency with existing patterns
- Use the completion features to implement consistent error handling
- Utilize refactoring capabilities for code cleanup operations
- Generate unit tests that follow the existing testing patterns
- Have Cursor.ai generate contextual documentation that explains reasoning

### Documentation Tools:
- Use MkDocs for comprehensive project documentation
- Generate API documentation with Sphinx
- Maintain architecture diagrams in draw.io or Mermaid format
- Use docstrings-markdown for converting Python docstrings to Markdown
- Keep README.md updated as the entry point for new contributors

### Development Environment:
- Maintain Docker Compose setup for local development
- Use pre-commit hooks for code quality checks
- Update GitHub Actions workflows when adding new components
- Set up environment variables in .env.example (without sensitive values)

## Security Testing

Regularly perform the following security checks:
- Static Analysis: Run Bandit and safety checks weekly
- Dependency Scanning: Audit dependencies for vulnerabilities
- Penetration Testing: Conduct external penetration tests quarterly
- Authentication Testing: Verify all auth bypass mitigations monthly
- Encryption Testing: Validate certificate validation and TLS configurations
- Document security test results and mitigations for any findings

## Documentation Requirements

- Update README.md when adding new features
- Maintain API documentation with examples
- Document security configurations and best practices
- Keep architecture diagrams current with system changes
- Add troubleshooting guides for common issues
- Ensure documentation explains the "why" behind implementation decisions

## CI/CD Integration

- All PRs must pass the CI pipeline before merging
- Support automatic deployment to staging environments
- Implement blue/green deployment strategies
- Add integration tests that run in CI environment
- Configure security scanning in the CI pipeline
- Include documentation checks in CI to ensure docstrings match implementation

## Network Administration Considerations

- Support private network deployment configurations
- Document firewall requirements and network flows
- Implement proper IPv6 support throughout the stack
- Support DNS-based service discovery
- Add support for proxy configurations and corporate network environments
- Document network architecture and security boundaries

## Monitoring and Alerting

- Define SLOs for critical service components
- Set up alerts for security anomalies
- Monitor certificate expiration dates
- Track rate limit breaches and authentication failures
- Implement health check endpoints for all services
- Document alert thresholds and response procedures

---

This guidance is intended to help you maintain the Secure MCP-gRPC project with the highest standards of security, performance, code quality, and documentation, leveraging your expertise in Python, web development, network security, enterprise systems administration, and technical writing.