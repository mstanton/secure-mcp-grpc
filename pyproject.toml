[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "secure-mcp-grpc"
version = "0.1.0"
description = "A secure gRPC transport layer for Model Context Protocol (MCP) with enhanced security features and telemetry"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
keywords = ["mcp", "grpc", "ai", "security", "telemetry"]
authors = [
    {name = "Matthew", email = "mrstanton81@gmaiil.com"}
]
maintainers = [
    {name = "Claude AI", email = "info@anthropic.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Topic :: Security",
]

dependencies = [
    "grpcio==1.44.0",
    "grpcio-tools==1.44.0",
    "protobuf==3.19.0",
    "cryptography==37.0.0",
    "pyjwt==2.4.0",
    "pydantic==1.9.0",
    "asyncio==3.4.3",
    "numpy==1.21.0",
    "pandas==1.3.0",
    "prometheus-client==0.14.0",
    "aiohttp==3.8.1",
    "argon2-cffi==21.3.0",
    "bcrypt==4.0.1",
    "certifi==2023.7.22",
    "cffi==1.15.1",
    "cryptography==37.0.0",
    "pyopenssl==23.2.0",
    "service-identity==23.1.0",
]

[project.optional-dependencies]
telemetry = [
    "plotly==5.8.0",
    "dash==2.5.0",
    "dash-bootstrap-components==1.1.0",
    "networkx==2.8.0",
    "matplotlib==3.5.0",
    "seaborn==0.11.2",
    "wordcloud==1.8.1",
    "scipy==1.8.0",
]

dashboard = [
    "dash==2.5.0",
    "dash-bootstrap-components==1.1.0",
    "flask==2.1.0",
    "gunicorn==20.1.0",
]

security = [
    "bandit==1.7.0",
    "safety==2.3.0",
    "cryptography==37.0.0",
    "pyopenssl==23.2.0",
    "service-identity==23.1.0",
    "argon2-cffi==21.3.0",
    "bcrypt==4.0.1",
]

dev = [
    "pytest==7.0.0",
    "pytest-asyncio==0.18.0",
    "pytest-cov==3.0.0",
    "black==22.3.0",
    "isort==5.10.0",
    "mypy==0.950",
    "flake8==4.0.0",
    "pre-commit==2.18.0",
    "sphinx==4.5.0",
    "sphinx-rtd-theme==1.0.0",
    "bandit==1.7.0",
    "safety==2.3.0",
]

full = [
    "secure-mcp-grpc[telemetry,dashboard,security,dev]",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/secure-mcp-grpc"
"Bug Tracker" = "https://github.com/yourusername/secure-mcp-grpc/issues"
"Documentation" = "https://secure-mcp-grpc.readthedocs.io/"
"Source Code" = "https://github.com/yourusername/secure-mcp-grpc"

[project.scripts]
mcp-dashboard = "secure_mcp_grpc.dashboard.app:main"
mcp-server = "secure_mcp_grpc.cli.server:main"
mcp-client = "secure_mcp_grpc.cli.client:main"

[tool.setuptools]
package-dir = {"" = "secure_mcp_grpc"}

[tool.setuptools.packages.find]
include = ["secure_mcp_grpc*"]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | proto
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=secure_mcp_grpc --cov-report=xml --cov-report=term"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["secure_mcp_grpc"]
omit = ["tests/*", "examples/*", "docs/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101"]  # Skip assert warnings in tests
targets = ["secure_mcp_grpc"]
