version: '3.8'

services:
  # MCP gRPC Server
  mcp-server:
    build:
      context: ..
      dockerfile: docker/server.Dockerfile
    container_name: mcp-server
    restart: unless-stopped
    ports:
      - "50051:50051"
    volumes:
      - ../config:/app/config:ro
      - ../certs:/app/certs:ro
      - mcp_logs:/app/logs
      - mcp_traces:/app/traces
    environment:
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=50051
      - MCP_AUTH_TYPE=mtls
      - MCP_CERT_PATH=/app/certs/server.crt
      - MCP_KEY_PATH=/app/certs/server.key
      - MCP_CA_PATH=/app/certs/ca.crt
      - MCP_CONFIG_PATH=/app/config/server.yaml
      - MCP_LOG_LEVEL=INFO
      - TELEMETRY_ENABLED=true
      - TELEMETRY_EXPORTER=prometheus
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; grpc.insecure_channel('localhost:50051').channel_ready()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Telemetry Dashboard
  dashboard:
    build:
      context: ..
      dockerfile: docker/dashboard.Dockerfile
    container_name: mcp-dashboard
    restart: unless-stopped
    ports:
      - "8050:8050"
    volumes:
      - mcp_traces:/app/traces:ro
      - mcp_logs:/app/logs:ro
    environment:
      - DASH_DEBUG=false
      - DASH_REQUESTS_PATHNAME_PREFIX=/
      - TRACES_DIR=/app/traces
      - REFRESH_INTERVAL=5
      - LOG_LEVEL=INFO
    depends_on:
      mcp-server:
        condition: service_healthy
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../config/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Grafana for advanced visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ../config/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY=true
      - GF_SECURITY_STRICT_TRANSPORT_SECURITY_MAX_AGE_SECONDS=31536000
    networks:
      - mcp-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

networks:
  mcp-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  mcp_logs:
    driver: local
  mcp_traces:
    driver: local
